'''
#list examples
things = ['a', 'b', 'c', 'd']
print(things[1])

things[1] = 'z'
print(things[1])

print(things)
'''

#dict examples
stuff = {'name': 'Zed', 'age': 39, 'height': 6*12+2}

print(stuff['name'])

print(stuff['age'])

print(stuff['height'])

stuff['city'] = "SF"
print(stuff['city'])

#putting stuff into dicts?
stuff[1] = "Wow"
stuff[2] = "Neato"
print(stuff[1])

print(stuff[2])
print(stuff)

'''
#this also works, just forgot to change "del stuff[1]"
stuff['this could be'] = 'Wow'
stuff['This is'] = 'Neato'

print(stuff['this could be'])
print(stuff['This is'])
print(stuff)


'''
del stuff['city']
del stuff[1]
del stuff[2]
print(stuff)


#create a mapping of state to abbr
#start of a base dict
states = {
	'Oregon': 'OR',
	'Florida': 'FL',
	'California': 'CA',
	'New York': 'NY',
	'Michigan': 'MI'
}
#create a basic set of states and some cities in them
#new dict
cities = {
	'CA': 'San Francisco',
	'MI': 'Detroit',
	'FL': 'Jacksonville'
}

#add some more cities
#adding "cities" to the cities dict. 
cities['NY'] = 'New York'
cities['OR'] = 'Portland'

#print out some cities
#('-'*10) will print 10 "-" -----------
print('-' * 10)
print("NY State has: ", cities['NY'])
print("OR State has: ",  cities['OR'])

#print some states
print('-' * 10)
print("Michigan's abbreviation is: ", states['Michigan'])
print("Florida's abbreviation is: ", states['Florida'])

#print every state abbreviation
#use f to slip variables into print statements
print('-' * 10)
for state, abbrev in list(states.items()):
	print(f"{state} is abbreviated {abbrev}")

#print every city in sate
print('-' * 10)
for abbrev, city in list(cities.items()):
	print(f"{abbrev} has the city {city}")

#now do both at the same time
print('-' * 10)
#for loop to print list items states being the source. and items specifically "items()" Returns a list containing a tuple for each key value pair
#state and abbrev are new variables
#list() creates a list of items
#items() creates a view obj. The view object contains the key-value pairs of the dictionary, as tuples in a list
for state, abbrev in list(states.items()):
	print(f"{state} state is abbreviated {abbrev}")
	print(f"and has city {cities[abbrev]}")

print('-' * 10)
#safely get a abbreviation by state that might not be there
state = states.get('Texas')

if not state:
	print("Sorry, no Texas")

#get a city with a default value
city = cities.get('TX', 'Does Not Exist')
print(f"The city for the state 'TX' is: {city}")
